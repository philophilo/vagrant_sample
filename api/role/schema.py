import graphene

from graphene_sqlalchemy import (SQLAlchemyObjectType)
from api.role.models import Role as RoleModel
from helpers.auth.error_handler import SaveContextManager


class Role(SQLAlchemyObjectType):
    """
        Autogenerated return type of a role
    """

    class Meta:
        model = RoleModel


class CreateRole(graphene.Mutation):
    """
        Returned role payload on creation of a role
    """

    class Arguments:
        role = graphene.String(required=True)
    role = graphene.Field(Role)

    def mutate(self, info, **kwargs):
        role = RoleModel(**kwargs)
        payload = {
            'model': RoleModel, 'field': 'role', 'value':  kwargs['role']
            }
        with SaveContextManager(role,  'Role', payload):
            return CreateRole(role=role)


class Query(graphene.ObjectType):
    """
        Query to get user roles
    """
    roles = graphene.List(
        Role,
        description="Returns a list of user roles")
    role = graphene.Field(
        Role,
        role=graphene.String(),
        description="Returns a user role and accepts the following argument\
        \n- role: Field for a user role")

    def resolve_roles(self, info):
        # get all roles
        query = Role.get_query(info)
        return query.all()

    def resolve_role(self, info, role):
        # get a specific role
        query = Role.get_query(info)
        return query.filter(RoleModel.role == role).first()


class Mutation(graphene.ObjectType):
    create_role = CreateRole.Field(
        description="Mutation to create a new user role with the argumet\
            \n- role: Name field of the role[required]")
